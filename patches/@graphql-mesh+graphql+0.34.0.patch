diff --git a/node_modules/@graphql-mesh/graphql/cjs/index.js b/node_modules/@graphql-mesh/graphql/cjs/index.js
index 7f49012..b939986 100644
--- a/node_modules/@graphql-mesh/graphql/cjs/index.js
+++ b/node_modules/@graphql-mesh/graphql/cjs/index.js
@@ -72,6 +72,14 @@ class GraphQLHandler {
         Object.keys(httpSourceConfig.schemaHeaders || {}).forEach(headerName => {
             this.interpolationStringSet.add(headerName.toString());
         });
+
+        if(!httpSourceConfig.source && httpSourceConfig.useGETForQueries) {
+            const introspectionGET = new URL(httpSourceConfig.endpoint)
+            introspectionGET.searchParams.set('query',graphql_1.stripIgnoredCharacters(graphql_1.getIntrospectionQuery()));
+            introspectionGET.searchParams.set('ext','.graphql');
+            httpSourceConfig.source = introspectionGET.toString();
+        }
+
         const schemaHeadersFactory = (0, string_interpolation_1.getInterpolatedHeadersFactory)(httpSourceConfig.schemaHeaders || {});
         if (httpSourceConfig.source) {
             const headers = schemaHeadersFactory({
@@ -102,6 +110,9 @@ class GraphQLHandler {
                     assumeValid: true,
                 });
             }
+            else if (sdlOrIntrospection.data.__schema) {
+                return (0, graphql_1.buildClientSchema)(sdlOrIntrospection.data);
+            }
             throw new Error(`Invalid introspection data: ${cross_helpers_1.util.inspect(sdlOrIntrospection)}`);
         }
         return this.nonExecutableSchema.getWithSet(() => {
diff --git a/node_modules/@graphql-mesh/graphql/esm/index.js b/node_modules/@graphql-mesh/graphql/esm/index.js
index bcb0758..15f5a1b 100644
--- a/node_modules/@graphql-mesh/graphql/esm/index.js
+++ b/node_modules/@graphql-mesh/graphql/esm/index.js
@@ -1,4 +1,4 @@
-import { buildASTSchema, buildClientSchema, buildSchema, GraphQLSchema, Kind, print, } from 'graphql';
+import { buildASTSchema, buildClientSchema, buildSchema, GraphQLSchema, Kind, print, stripIgnoredCharacters, getIntrospectionQuery } from 'graphql';
 import lodashGet from 'lodash.get';
 import { process, util } from '@graphql-mesh/cross-helpers';
 import { PredefinedProxyOptions } from '@graphql-mesh/store';
@@ -70,6 +70,14 @@ export default class GraphQLHandler {
             this.interpolationStringSet.add(headerName.toString());
         });
         const schemaHeadersFactory = getInterpolatedHeadersFactory(httpSourceConfig.schemaHeaders || {});
+
+        if(!httpSourceConfig.source && httpSourceConfig.useGETForQueries) {
+            const introspectionGET = new URL(httpSourceConfig.endpoint)
+            introspectionGET.searchParams.set('query',stripIgnoredCharacters(getIntrospectionQuery()));
+            introspectionGET.searchParams.set('ext','.graphql');
+            httpSourceConfig.source = introspectionGET.toString();
+        }
+
         if (httpSourceConfig.source) {
             const headers = schemaHeadersFactory({
                 env: process.env,
@@ -99,6 +107,11 @@ export default class GraphQLHandler {
                     assumeValid: true,
                 });
             }
+            else if (sdlOrIntrospection.data.__schema) {
+                return buildClientSchema(sdlOrIntrospection.data, {
+                    assumeValid: true,
+                });
+            }
             throw new Error(`Invalid introspection data: ${util.inspect(sdlOrIntrospection)}`);
         }
         return this.nonExecutableSchema.getWithSet(() => {
